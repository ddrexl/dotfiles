[init]
    templatedir = ~/.git_template
[push]
    default = current
[color]
    ui = auto
[alias]
    br = branch
    ca = commit --amend
    ce = commit --amend --no-edit
    ci = commit
    cl = clone
    co = checkout
    cp = cherry-pick
    df = diff
    ds = diff --staged
    sh = show HEAD
    # show only 10 logs
    l = log --graph --oneline --decorate -10
    rb = rebase
    rba = rebase --abort
    rbc = rebase --continue
    rbi = rebase --interactive
    rh = reset --hard
    s = stash
    sp = stash pop
    st = status
    who = log --pretty=format:'%w(120, 0, 38)%C(yellow)%h%Creset %C(green)%<(15,trunc)%an%Creset %C(cyan)%<(12,trunc)%cr%Creset %C(red)%d%Creset %s'  --all

    # useful lists - note the plural form
    tags = tag -l
    branches = branch -a
    remotes = remote -v
    aliases = config --get-regexp alias

    # delete fully merged branches
    brd = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
    # rebase current branch onto freshly pulled main
    upd = "!git co main && git pull && git co - && git rebase main"
    # try to rebase local branches onto origin/main
    upd-rebase-all = "!for branch in $(git for-each-ref --format=\"%(refname:lstrip=2)\" refs/heads/); do echo rebasing \"$branch\"; git rebase origin/main \"$branch\" > /dev/null || git rebase --abort; done"
    # do all above
    upd-all = "!git upd-rebase-all && git co main && (git brd 2> /dev/null || echo all up-to-date)"
[core]
    excludesfile = ~/.gitignore
[fetch]
    prune = true
[diff]
    indentHeuristic = true
    compactionHeuristic = true
[diff "bin"]
    # Use `hexdump` to diff binary files
    textconv = hexdump -v -C
[user]
    # force user config on a per repo basis if no global user config
    useconfigonly = true
[commit]
  template = ~/.gitmessage

# vim: sw=4 ts=4 et filetype=gitconfig:
